---
title: Dialog and polyfill demos
layout: basic
---

<script src="https://googlechrome.github.io/dialog-polyfill/dist/dialog-polyfill.js"></script>
<link rel="stylesheet" href="https://googlechrome.github.io/dialog-polyfill/dist/dialog-polyfill.css">
<style>
  body {
    margin: 5em;
  }

  .demo {
    border-top: 1px solid #ccc;
    padding-top: 16px;
    margin: 16px 0;
  }

  .demo button {
    margin-right: 12px;
  }

  template {
    display: none !important;
    /* in case we're loaded in an ancient browser */
  }

  *[hidden] {
    display: none !important;
  }

  dialog.sidebar {
    position: fixed;
    top: 0;
    left: 0;
    width: 90%;
    max-width: 240px;
    bottom: 0;
    margin: 0;
    height: 100%;
    border: none;
    box-shadow: 0 0 4px rgba(0, 0, 0, 0.125);
  }

  dialog.nearby {
    position: absolute;
    max-width: 24em;
    margin: 0;
    left: auto;
    right: auto;
  }

</style>

</head>
<body>

  <h1><a href="?">{{title}}</a></h1>

  <p>This page demonstrates HTML's <code>&lt;dialog&gt;</code> element. If your browser does not have native support, then support is provided by the <a href="https://github.com/GoogleChrome/dialog-polyfill">polyfill</a>.</p>

  <p hidden style="color: red;" id="error"></p>

  <p><strong>Native support: <span id="support"></span></strong></p>

  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>

  <template id="demo-modal">
    <p>I'm a modal dialog! This blocks the page from being accessed behind me, and is a core reason <code>&lt;dialog&gt;</code> is useful.</p>
    <p>You can also hit the <code>ESC</code> on your keyboard to close the top-most modal dialog.</p>
  </template>

  <template id="demo-nonmodal">
    <p>This dialog opens but does not block the page from being accessed. It was opened with <code>dialog.show()</code>.</p>
  </template>

  <template id="demo-nearby">
    <p>This dialog was opened with <code>dialog.show()</code>. Which allows it to be positioned.</p>
    <p>The Close button is focussed by default when using the polyfill</p>
    <p><button>futton</button></p>
    <p>
      <label for="text-field"></label>
      <input type="text" id="text-field" value="text field">
    </p>
  </template>

  <script>
    window.addEventListener('error', function (event) {
      var errorNode = document.getElementById('error');
      errorNode.textContent = event.error.toString();
      errorNode.removeAttribute('hidden');
    });
  </script>
  <script>
    (function () {

      const supportNode = document.getElementById('support');
      const testDialog = document.createElement('dialog');
      if (testDialog.showModal) {
        supportNode.style.color = 'blue';
        supportNode.textContent = 'YES';
      } else {
        supportNode.style.color = 'red';
        supportNode.textContent = 'NO';
      }

      function createDemo(title, content, options) {
        options = Object.assign({
          modal: true,
          close: true,
          className: '',
          wrap: false,
        }, options);

        const dialog = document.createElement('dialog');
        dialogPolyfill.registerDialog(dialog);

        const dialogContent = options.wrap ? document.createElement('div') : dialog;
        if (dialogContent !== dialog) {
          dialog.append(dialogContent);
        }

        if (typeof content === 'string') {
          dialogContent.innerHTML = content;
        } else {
          dialogContent.append(content);
        }
        if (options.className) {
          dialog.className = options.className;
        }

        const button = createButton('Show', options.modal ? () => dialog.showModal() : () => dialog.show());
        const description = Object.assign(document.createElement('span'), { textContent: title });

        const holder = Object.assign(document.createElement('div'), { className: 'demo' });
        holder.append(button, description, dialog);

        if (options.close) {
          dialogContent.append(createButton('Close', () => dialog.close()));
        }

        document.body.append(holder);
        return dialog;
      }

      function createButton(title, handler) {
        const button = document.createElement('button');
        button.textContent = title;
        button.addEventListener('click', handler);
        return button;
      }

      function fromTemplate(id) {
        const template = document.getElementById(id);
        return template.content.cloneNode(true);
      }

      // Demos below.

      createDemo('Basic modal', fromTemplate('demo-modal'));

      createDemo('Basic nonmodal', fromTemplate('demo-nonmodal'), { modal: false });

      createDemo('Nearby demo', fromTemplate('demo-nearby'), { className: 'nearby', modal: false, });

    }());
  </script>

  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
  <p>&nbsp;</p>
